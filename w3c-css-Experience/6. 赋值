6.1.1 指定值

用户代理必须先根据下列机制（按优先顺序）给每个属性赋值一个指定值：

如果层叠产生了一个值，就使用它
否则，如果属性是继承的并且元素不是文档树的根，使用其父元素的计算值
否则使用属性的初始值，每个属性的初始值都在属性定义中指出了
6.1.2 计算值

指定值通过层叠被处理为计算值，例如，URI被转换成绝对的，'em'和'ex'单位被计算为像素或者绝对长度。计算一个值并不需要用户代理渲染文档

UA无法处理为绝对URI的话，该URI的计算值就是指定值

一个属性的计算值由属性定义中Computed Value行决定。当指定值为'inherit'时，计算值的定义见继承小节

即使属性不适用，计算值也存在，定义在'Applies To'行。然而，有些属性可能根据属性是否适用于该元素来定义元素属性的计算值

6.1.3 应用值

处理计算值时，尽可能不要格式化文档。然而，有些值只能在文档布局完成时确定。例如，如果一个元素的宽度是其包含块的特定百分比，在包含块的宽度确定之前无法确定这个宽度。应用值是采用计算值并把剩余的依赖处理成一个绝对值的结果

6.1.4 实际值

原则上，应用值应该用于渲染，但用户代理可能无法在给定的环境中利用该值。例如，用户代理或许只能用整数像素宽度渲染边框，因此不得不对宽度的计算值做近似处理，或者用户代理可能被迫只用黑白色调而不是全彩色。实际值是经过近似处理后的应用值

6.2 继承

有些值是从文档树中某个元素的子级继承来的，就像上面描述的一样。每个属性都定义了它是不是继承的

假设一个H1元素里有一个强调元素(EM)：

<H1>The headline <EM>is</EM> important!</H1>
如果没有给EM元素赋值颜色，强调的"is"将从其父元素继承颜色，所以如果H1是蓝色的，EM元素同样也将是蓝色的

当出现继承时，元素继承计算值。来自父元素的计算值同时作为指定值和其子级的计算值

例如，给出如下样式表：

body { font-size: 10pt }
h1 { font-size: 130% }
和文档片段：

<BODY>
  <H1>A <EM>large</EM> heading</H1>
</BODY>
H1元素的'font-size'属性将获得计算值'13pt'（130%乘以父元素的值10pt）。因为'font-size'的计算值是继承的，EM元素也将获得计算值'13pt'。如果用户代理没有可用的13pt字体，H1和EM的'font-size'的实际值可能是，例如，'12pt'

6.4.2 !important规则

CSS尝试在编写者和用户样式表之间建立平衡。默认情况下，编写者样式表中的规则会重写那些位于用户样式表中的（见层叠规则3）

然而，为了平衡，"!important"声明（分隔符token "!"和关键字"important"后面跟着声明）比常规声明优先。编写者和用户样式表都可能含有"!important"声明，并且用户"!important"规则会重写编写者"!important"规则。通过给予用户表现上的特殊需求（大字体，颜色组合等等）控制，该CSS特性提高了文档的可访问性

声明一个简写属性（例如，'background'）为"!important"等价于声明其所有子属性为"!important"

下例中用户样式表的第一条规则含有一个"!important"声明，重写了编写者样式表中的相关声明。第二条声明也将生效，因为被标记为"!important"了。然而，用户样式表中的第三条规则不是"!important"，因此被编写者样式表（恰好在一条简写属性中设置了）中的第二条规则重写了。而且，第三条编写者规则将被第二条编写者规则重写，因为第二条规则是"!important"。这说明"!important"声明在编写者样式表中也有效

/* From the user's style sheet */
p { text-indent: 1em ! important }
p { font-style: italic ! important }
p { font-size: 18pt }

/* From the author's style sheet */
p { text-indent: 1.5em !important }
p { font: normal 12pt sans-serif !important }
p { font-size: 24pt }

6.4.3 计算选择器的特殊性（specificity）

一个选择器的特殊性是根据下列（规则）计算的：

如果声明来自一个'style'属性而不是一条选择器样式规则，算1，否则就是0 (= a)（HTMl中，一个元素的"style"属性值是样式表规则，这些属性没有选择器，所以a=1，b=0，c=0，d=0）
计算选择器中ID属性的数量 (= b)
计算选择器中其它属性和伪类的数量 (= c)
计算选择器中元素名和伪元素的数量 (= d)
特殊性只根据选择器的形式来定。特殊的，一个"[id=p33]"形式的选择器被算作一个属性选择器(a=0, b=0, c=1, d=0)，即使id属性在源文档的DTD中被定义为"ID"

4个数连起来a-b-c-d（在一个基数很大的数字系统中（in a number system with a large base））表示特殊性

一些示例：

 *             {}  /* a=0 b=0 c=0 d=0 -> specificity = 0,0,0,0 */
 li            {}  /* a=0 b=0 c=0 d=1 -> specificity = 0,0,0,1 */
 li:first-line {}  /* a=0 b=0 c=0 d=2 -> specificity = 0,0,0,2 */
 ul li         {}  /* a=0 b=0 c=0 d=2 -> specificity = 0,0,0,2 */
 ul ol+li      {}  /* a=0 b=0 c=0 d=3 -> specificity = 0,0,0,3 */
 h1 + *[rel=up]{}  /* a=0 b=0 c=1 d=1 -> specificity = 0,0,1,1 */
 ul ol li.red  {}  /* a=0 b=0 c=1 d=3 -> specificity = 0,0,1,3 */
 li.red.level  {}  /* a=0 b=0 c=2 d=1 -> specificity = 0,0,2,1 */
 #x34y         {}  /* a=0 b=1 c=0 d=0 -> specificity = 0,1,0,0 */
 style=""          /* a=1 b=0 c=0 d=0 -> specificity = 1,0,0,0 */
<HEAD>
<STYLE type="text/css">
  #x97z { color: red }
</STYLE>
</HEAD>
<BODY>
<P ID=x97z style="color: green">
</BODY>
上面的示例中，P元素的颜色将是绿色，"style"属性中的声明将重写STYLE元素中的，因为层叠规则3，它的特殊性更高