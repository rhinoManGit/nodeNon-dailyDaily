2.3 CSS 2.1 处理模型

本节内容（不包含子节）是非规范的

本节展示了一种可能的用户代理支持CSS的工作模型，这只是一种概念模型，实际实现可能不同

在这种模型中，用户代理通过下列步骤来处理源码：

解析源文档并创建文档树.
识别目标媒体类型.
检索文档相关特定目标媒体类型的所有样式表
通过给每个适用于目标媒体类型的属性赋值来为文档树中的元素做注解。根据层叠与继承中描述的机制来对属性赋值
值的计算部分取决于适用于目标媒体类型的格式化算法。例如，如果目标媒体是screen，用户代理会应用可视化格式模型

根据有注解的文档树，生成格式化结构。通常，格式化结构与文档树很像，但也可能大不一样，尤其是编写者使用伪元素和生成的内容时。首先，格式化结构根本没必要是“树形的”——结构的类型取决于实现。其次，与文档树相比，格式化结构包含的信息可能更多也可能更少。例如，如果文档树中的一个元素有一个值为'none'的'display'属性，这个元素将不会在格式化结构中生成任何东西。而一个列表元素可能在格式化结构中生成更多信息：列表元素的内容和列表样式信息（例如，黑点图片）
注意CSS用户代理不会在这个阶段改变文档树，特别的，由样式表完成的内容生成不会被反馈给文档语言处理器（例如，重新解析）

把格式化结构传递给目标媒体（例如，打印结果，在屏幕上显示，渲染为声音等等）

注意点：
1，“结构的类型取决于实现，其次，与文档树相比格式化的结构包含的信息可多可少，”：
例如：如果文档树中的一个元素有一个值为'none'的'display'属性，这个元素将不会在格式化结构中生成任何东西。而一个列表元素可能在格式化结构中生成更多信息：列表元素的内容和列表样式信息（例如，黑点图片）
2，注意CSS用户代理不会在这个阶段改变文档树，特别的，由样式表完成的内容生成不会被反馈给文档语言处理器（例如，重新解析）

2.3.1 canvas

对于所有媒体而言，术语 canvas都表示“格式化结构将被渲染的地方”。canvas对每个维度的空间来说都是无限的，但渲染通常出现在canvas上一块有限的区域中，
由用户代理根据目标媒体建立。例如，用户代理渲染到屏幕通常限定一个最小宽度并根据视口的尺寸选择初始宽度。用户代理渲染页面时通常强制加上宽度和高度约束。听觉用户代理可能在音频空间加以限制，
但并不及时（Aural user agents may impose limits in audio space, but not in time.）

CSS 2.1 选择器和属性允许样式表引用文档或用户代理的以下部分：

文档树中的元素和它们之间的某些关系（见选择器）
文档树中的元素属性和它们的属性值（见属性选择器）
元素内容的某些部分（见:first-line和:first-letter伪元素）
文档树中的特定状态的元素（见伪类）
将渲染文档的canvas的某些部分（aspect）
某些系统信息（见用户界面）