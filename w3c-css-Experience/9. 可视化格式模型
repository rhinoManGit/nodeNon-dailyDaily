9.1.2 包含块（Containing block）

CSS 2.1中，很多盒的位置和大小是根据被称为包含块的矩形框的边计算的。一般把生成的盒作为后代盒的包含块，我们说一个盒为其后代“建立”了包含块。“一个盒的包含块”表示“盒所在的包含块”，而不是它生成的（包含块）

每个盒都根据其包含块给定了一个位置，但它不受该包含块的限制，可能会溢出

9.4.1 块格式化上下文

浮动，绝对定位元素，非块盒的块容器（例如，inline-blocks，table-cells和table-captions）和'overflow'不为'visible'的块盒（当该值已被传播到视口时除外（except when that value has been propagated to the viewport））会为它们的内容建立一个新的块格式化上下文

在一个块格式化上下文中，盒在竖直方向一个接一个地放置，从包含块的顶部开始。两个兄弟盒之间的竖直距离由'margin'属性决定。同一个块格式化上下文中的相邻块级盒之间的竖直margin会合并(相加的，其他的不是块级上下文的margin是取绝对值最大的)

在一个块格式化上下文中，每个盒的left外边（left outer edge）挨着包含块的left边（对于从右向左的格式化，right边挨着）。即使存在浮动（尽管一个盒的行盒可能会因为浮动收缩），这也成立。除非该盒建立了一个新的块格式化上下文（这种情况下，该盒自身可能会因为浮动变窄）

关于分页媒体中分页的信息，请查看合法的分页章节

10.8 行高的计算：'line-height'与'vertical-align'属性

如内联格式化上下文节所述，用户代理把内联级盒排列在一个行盒的垂直堆叠里。行盒的高度由下列规则决定：

计算行盒中每个内联级盒的高度时，对于可替换元素，inline-block元素和inline-table元素，这个值就是其margin box的高度；对于内联盒，这个值是其'line-height'（见“计算height与margin”和“行距（Leading）与半行距”中的内联盒的高度）
内联级盒是根据其'vertical-align'属性竖直对齐的。如果它们是'top'或者'bottom'对齐，它们必须对齐得让行盒高度最小化。如果这样的盒足够高，存在多个解，而CSS 2.1没有定义行盒基线的位置（即，strut的位置，见下文）
行盒高度是最高的盒的top与最低的盒的bottom之间的距离（包括下面'line-height'中解释的strut）
空内联元素生成空的内联盒，但这些盒仍然具有margin，padding，border和line height，并因此会影响这些计算，就像有内容的元素一样